<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-4.2.xsd
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.2.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<!-- spring config -->

	<!-- <context:property-placeholder location="classpath:config.properties" /> -->
	<context:component-scan base-package="com.gqhmt.fss.listener.*;com.gqhmt.funds.architect;com.gqhmt.fss.architect;com.gqhmt.sys.*;com.gqhmt.pay.service;com.gqhmt.extServInter.service.*.impl.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>

	</context:component-scan>






	<!-- 任务执行器 -->
	<task:executor id="executor" pool-size="10"/>
	<!-- 任务调度器 -->
	<task:scheduler id="scheduler" pool-size="10"/>
	<!--开启注解调度支持 @Async @Scheduled-->
	<task:annotation-driven executor="executor" scheduler="scheduler" proxy-target-class="true"/>

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
				<value>classpath*:jdbc/jdbc.properties</value>
		</property>
	</bean>

	<bean id="write_dataSource"  class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${write.jdbc.url}" />
		<property name="username" value="${write.jdbc.username}" />
		<property name="password" value="${write.jdbc.password}" />

		<property name="initialSize" value="5"/>
		<property name="maxTotal" value="50" />
		<property name="maxIdle" value="8" />
		<property name="minIdle" value="5" />

		<property name="maxWaitMillis" value="250000"/>

		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />


	</bean>
	<!--<bean id="read_dataSource"  class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${read.jdbc.url}" />
		<property name="username" value="${read.jdbc.username}" />
		<property name="password" value="${read.jdbc.password}" />


		<property name="initialSize" value="5"/>
		<property name="maxTotal" value="50" />
		<property name="maxIdle" value="8" />
		<property name="minIdle" value="5" />

		<property name="maxWaitMillis" value="250000"/>

		<property name="poolPreparedStatements" value="true" />

		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />

	</bean>-->
	<bean id="readSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="write_dataSource" />
		<property name="configLocation" value="classpath:jdbc/mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:sqlMapper/fss/*/read/*-sqlMapper.xml</value>
				<value>classpath:sqlMapper/funds/*/read/*-sqlMapper.xml</value>
				<value>classpath:sqlMapper/sys/read/*-sqlMapper.xml</value>
			</list>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
							offsetAsPageNum=true
							rowBoundsWithCount=true
							pageSizeZero=true
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<bean id="writeSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="write_dataSource" />
		<property name="configLocation" value="classpath:jdbc/mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<!---->
				<value>classpath:sqlMapper/fss/*/write/*-sqlMapper.xml</value>
				<value>classpath:sqlMapper/funds/*/write/*-sqlMapper.xml</value>
				<value>classpath:sqlMapper/sys/write/*-sqlMapper.xml</value>
			</list>
		</property>
	</bean>

	<bean id="fssReadMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gqhmt.*.architect.*.mapper.read" />
		<property name="sqlSessionFactoryBeanName" value="readSqlSessionFactory" />
	</bean>
	<bean id="sysReadMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gqhmt.sys.mapper.read" />
		<property name="sqlSessionFactoryBeanName" value="readSqlSessionFactory" />
	</bean>
	<bean id="fssWriteMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gqhmt.*.architect.*.mapper.write" />
		<property name="sqlSessionFactoryBeanName" value="writeSqlSessionFactory" />
	</bean>
	<bean id="sysWriteMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gqhmt.sys.mapper.write" />
		<property name="sqlSessionFactoryBeanName" value="writeSqlSessionFactory" />
	</bean>

	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gqhmt.fss.architect.*.mapper;com.gqhmt.sys.mapper"/>
		<property name="properties">
			<value>
				mappers=com.gqhmt.core.mybatis.ReadAndWriteMapper,com.gqhmt.core.mybatis.ReadMapper
			</value>
		</property>
	</bean>
	<!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">-->
		<!--<constructor-arg index="0" ref="writeSqlSessionFactory"/>-->
	<!--</bean>-->

	<!-- 配置事务 -->
	<bean id="tx_manager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="write_dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="tx_manager"
						  proxy-target-class="true" />
	<!-- 应用事务 -->
	<tx:advice id="tx_advice" transaction-manager="tx_manager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="FssException" />
		</tx:attributes>
	</tx:advice>

	<!-- 通知器(把事务通知绑定到切入点) -->
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="tx_advice"
					 pointcut="execution(* com.gqhmt.*.*.*.service..*(..) throws com.gqhmt.core.FssException ) " />
	</aop:config>

	<aop:aspectj-autoproxy />


</beans>