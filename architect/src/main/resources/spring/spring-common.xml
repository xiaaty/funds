<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-4.2.xsd
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.2.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<!-- spring config -->
	<!-- <context:property-placeholder location="classpath:config.properties" /> -->
	<context:component-scan base-package="com.gqhmt.fss.architect.*.service"/>
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
				<value>classpath*:jdbc/jdbc.properties</value>
		</property>
	</bean>

	<bean id="write_dataSource"  class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${write.jdbc.url}" />
		<property name="username" value="${write.jdbc.username}" />
		<property name="password" value="${write.jdbc.password}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="5" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="50" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="5" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- 超过时间限制多长； -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="false" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="50" />

		<property name="filters" value="stat,log4j,wall" />
		<property name="connectionProperties" value="druid.stat.mergeSql=true" />
		<property name="useGlobalDataSourceStat" value="true" />
	</bean>
	<bean id="read_dataSource"  class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${read.jdbc.url}" />
		<property name="username" value="${read.jdbc.username}" />
		<property name="password" value="${read.jdbc.password}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="5" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="50" />
		<!-- 最小空闲连接数 -->
		<property name="minIdle" value="5" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- 超过时间限制多长； -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		<!-- 申请连接的时候检测 -->
		<property name="testWhileIdle" value="false" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="50" />

		<property name="filters" value="stat,log4j,wall" />
		<property name="connectionProperties" value="druid.stat.mergeSql=true" />
		<property name="useGlobalDataSourceStat" value="true" />
	</bean>
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="mergeSql" value="true" />
	</bean>
	<bean id="readSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="read_dataSource" />
		<property name="configLocation" value="classpath:jdbc/mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:sqlMapper/read/**/*-sqlMapper.xml</value>
			</list>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql
							offsetAsPageNum=true
							rowBoundsWithCount=true
							pageSizeZero=true
							reasonable=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<bean id="writeSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="write_dataSource" />
		<property name="configLocation" value="classpath:jdbc/mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<!---->
				<value>classpath:sqlMapper/write/**/*-sqlMapper.xml</value>
			</list>

		</property>
		<property name="plugins">
			<array>

			</array>
		</property>
	</bean>

	<bean id="sysReadMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gqhmt.fss.architect.*.mapper.read" />
		<property name="sqlSessionFactoryBeanName" value="readSqlSessionFactory" />
	</bean>
	<bean id="sysWriteMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gqhmt.fss.architect.*.mapper.write" />
		<property name="sqlSessionFactoryBeanName" value="writeSqlSessionFactory" />
	</bean>
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.gqhmt.fss.architect.*.mapper"/>
		<property name="properties">
			<value>
				mappers=com.gqhmt.core.mybatis.WriteMapper,com.gqhmt.core.mybatis.ReadMapper
			</value>
		</property>
	</bean>
	<!--<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">-->
		<!--<constructor-arg index="0" ref="writeSqlSessionFactory"/>-->
	<!--</bean>-->


</beans>